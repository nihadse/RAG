import os
import pandas as pd
from openpyxl import load_workbook

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    # Your provided list of possible RC column names
    rc_cols = [
        "N° du registre du commerce",
        "السجل التجاري",
        "رقم السجل التجاري",
        "Registre de commerce (extract)",
        "راد من ترقد السعيد, رقم السجل التجاري",
        "RC"
    ]

    # Merged header titles
    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاريخ اخر توطين بنكي لعمليات استيراد"

    # Mapping from CSV columns to logic
    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    # Load CSV and set index
    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    for file in os.listdir(excel_folder):
        if not file.endswith(".xlsx"):
            continue

        input_path = os.path.join(excel_folder, file)
        output_path = os.path.join(output_folder, file)
        print(f"\n📄 Processing: {file}")

        wb = load_workbook(input_path)
        updated = False

        for sheetname in wb.sheetnames:
            ws = wb[sheetname]
            header_row = None
            header_map = {}

            # Look for exact match with rc_cols
            for i in range(1, 51):
                row_vals = [str(cell.value).strip() if cell.value else "" for cell in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row or "Registre_commerce" not in header_map:
                print(f"⚠️ No RC header found in {file} / Sheet: {sheetname}")
                continue

            # Detect merged header columns
            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                val = str(cell.value).strip()
                if val == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif val == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1
                elif val == loan_date_header:
                    header_map["loan_date"] = merged.min_col
                elif val == import_date_header:
                    header_map["import_date"] = merged.min_col

            row_num = header_row + 2
            while True:
                rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                rc = rc_cell.value
                if rc is None:
                    break

                rc_key = str(rc).strip()
                matched = rc_key in csv_df.index

                for csv_col, (field_key, yn_val) in csv_column_map.items():
                    if "yn" in field_key:
                        yes_col = header_map.get(f"{field_key}_yes")
                        no_col = header_map.get(f"{field_key}_no")
                        if yes_col and no_col:
                            yes_cell = ws.cell(row=row_num, column=yes_col)
                            no_cell = ws.cell(row=row_num, column=no_col)

                            if matched:
                                if csv_df.at[rc_key, csv_col].strip().upper() == "X":
                                    if yn_val == "نعم":
                                        yes_cell.value = "✓"
                                    elif yn_val == "لا":
                                        no_cell.value = "✓"
                                    updated = True
                            else:
                                if not yes_cell.value and not no_cell.value:
                                    no_cell.value = "✓"
                                    updated = True

                    elif "date" in field_key and matched:
                        date_col = header_map.get(field_key)
                        if date_col:
                            date_val = csv_df.at[rc_key, csv_col].strip()
                            if date_val:
                                ws.cell(row=row_num, column=date_col).value = date_val
                                updated = True

                row_num += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print("ℹ️ No updates made.")

        wb.close()
