import os
import pandas as pd
import xlwings as xw

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    # === MATCH ON RC COLUMN ===
    rc_cols = [
        "RC", "رقم السجل التجاري", "Registre de commerce (extracted)",
        "رقم التسجيل", "السجل التجاري", 'N" du registre du commerce', "رقم ست"
    ]

    # === Arabic Excel column names ===
    loan_yn_cols = ["هل استفاد المتعامل الاقتصادي من قرض بنكي"]
    loan_date_cols = ["تاريخ اخر استفادة من قرض بنكي"]
    bank_dom_yn_cols = ["هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"]
    bank_dom_date_cols = ["تاريخ اخر بتوطين بنكي لعمليات استيراد"]

    # === CSV to Excel Mapping ===
    csv_column_map = {
        "beneficiaire credit": ("loan_yn", {"Oui": "نعم", "Non": "لا"}),
        "Derniere date effet crédit": ("loan_date", None),
        "Operation import": ("bank_dom_yn", {"Oui": "نعم", "Non": "لا"}),
        "Derniere date import": ("bank_dom_date", None)
    }

    # === Load CSV Data ===
    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ Column 'Registre_commerce' not found in CSV.")
        return

    csv_df.set_index("Registre_commerce", inplace=True)

    os.makedirs(output_folder, exist_ok=True)

    for file in os.listdir(excel_folder):
        if not file.endswith(".xlsx"):
            continue

        file_path = os.path.join(excel_folder, file)
        print(f"\n📂 Processing file: {file}")
        updated = False

        app = xw.App(visible=False)
        try:
            wb = app.books.open(file_path)

            for sheet in wb.sheets:
                found_header = False
                header_row = None
                header_map = {}

                # === Find header row (first 50 rows) ===
                for row in range(1, 51):
                    row_values = sheet.range(f"A{row}").expand("right").value
                    if not row_values:
                        continue
                    for val in row_values:
                        if val and str(val).strip() in rc_cols:
                            header_row = row
                            found_header = True
                            break
                    if found_header:
                        break

                if not found_header:
                    print(f"⚠️ No RC column found in {file} / Sheet: {sheet.name}")
                    continue

                headers = sheet.range(f"A{header_row}").expand("right").value

                # === Map column indexes ===
                for idx, name in enumerate(headers):
                    name = str(name).strip()
                    if name in rc_cols:
                        header_map["Registre_commerce"] = idx + 1
                    elif name in loan_yn_cols:
                        header_map["loan_yn"] = idx + 1
                    elif name in loan_date_cols:
                        header_map["loan_date"] = idx + 1
                    elif name in bank_dom_yn_cols:
                        header_map["bank_dom_yn"] = idx + 1
                    elif name in bank_dom_date_cols:
                        header_map["bank_dom_date"] = idx + 1

                if "Registre_commerce" not in header_map:
                    print(f"❌ RC column not found in sheet: {sheet.name}")
                    continue

                # === Fill data row by row ===
                row = header_row + 1
                while True:
                    cell_value = sheet.range((row, header_map["Registre_commerce"])).value
                    if not cell_value:
                        break

                    rc_key = str(cell_value).strip()
                    if rc_key in csv_df.index:
                        for csv_col, (field_key, translation_map) in csv_column_map.items():
                            if field_key in header_map and csv_col in csv_df.columns:
                                value = csv_df.at[rc_key, csv_col]
                                if translation_map:
                                    value = translation_map.get(value.strip(), "")
                                sheet.range((row, header_map[field_key])).value = value
                                updated = True
                    row += 1

            # === Save to output folder ===
            output_path = os.path.join(output_folder, file)
            if updated:
                wb.save(output_path)
                print(f"✅ Saved updated file: {output_path}")
            else:
                print(f"ℹ️ No data written to: {file}")
            wb.close()

        finally:
            app.quit()


