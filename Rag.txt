# Text cleaning function
def clean_text(text, lowercase=False):
    """Cleans raw text: removes unwanted characters, extra spaces, fixes multiple dots"""
    
    # Remove non-printable characters
    text = ''.join(filter(lambda x: x in string.printable, text))
    
    # Replace multiple consecutive dots (...) with a single dot (.)
    text = re.sub(r'\.{2,}', '.', text)
    
    # Replace multiple line breaks and spaces
    text = re.sub(r'\n+', '\n', text)  # collapse multiple newlines
    text = re.sub(r'[ \t]+', ' ', text)  # collapse multiple spaces

    # Remove leading/trailing spaces on each line
    text = "\n".join(line.strip() for line in text.splitlines())
    
    # Remove empty lines
    text = "\n".join([line for line in text.splitlines() if line.strip() != ""])
    
    if lowercase:
        text = text.lower()
    
    return text






from langchain_community.document_loaders import PyPDFLoader, CSVLoader, UnstructuredExcelLoader
from langchain.schema import Document
import os
import glob

# Your real documents directory
DOCS_DIR = "/mnt/LLMS/Procedures"

def load_documents():
    documents = []
    
    # === Load PDFs ===
    pdf_dir = os.path.join(DOCS_DIR, "pdfs")
    if os.path.exists(pdf_dir):
        for file in glob.glob(os.path.join(pdf_dir, "*.pdf")):
            try:
                loader = PyPDFLoader(file_path=file)  # Load single PDF file
                docs = loader.load()
                file_name = os.path.basename(file)

                # Add metadata
                for doc in docs:
                    doc.metadata["source_file"] = file_name
                    doc.metadata["source_type"] = "pdf"

                documents.extend(docs)
                print(f"Loaded {file_name}")
            except Exception as e:
                print(f"Error loading {file}: {e}")

    # === Load CSVs ===
    csv_dir = os.path.join(DOCS_DIR, "csv")
    if os.path.exists(csv_dir):
        for file in glob.glob(os.path.join(csv_dir, "*.csv")):
            try:
                loader = CSVLoader(file_path=file)
                docs = loader.load()
                file_name = os.path.basename(file)

                for doc in docs:
                    doc.metadata["source_file"] = file_name
                    doc.metadata["source_type"] = "csv"

                documents.extend(docs)
                print(f"Loaded {file_name}")
            except Exception as e:
                print(f"Error loading {file}: {e}")

    # === Load Excels ===
    excel_dir = os.path.join(DOCS_DIR, "excel")
    if os.path.exists(excel_dir):
        for file in glob.glob(os.path.join(excel_dir, "*.xls*")):
            try:
                loader = UnstructuredExcelLoader(file_path=file)
                docs = loader.load()
                file_name = os.path.basename(file)

                for doc in docs:
                    doc.metadata["source_file"] = file_name
                    doc.metadata["source_type"] = "excel"

                documents.extend(docs)
                print(f"Loaded {file_name}")
            except Exception as e:
                print(f"Error loading {file}: {e}")

    print(f"\nLoaded {len(documents)} documents in total.")
    return documents

# Call the function
docs = load_documents()
