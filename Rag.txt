# --- FUNCTIONS YOU ADDED ---

def extract_source_files(documents):
    """
    Extract source files from document metadata.
    """
    sources = []
    for doc in documents:
        if "source_file" in doc.get("metadata", {}):
            sources.append(doc["metadata"]["source_file"])
        elif "source" in doc.get("metadata", {}):
            sources.append(doc["metadata"]["source"])
    return list(set(sources))


def save_chat_history(chat_history, filename="chat_history.json"):
    """
    Save the chat history to a JSON file.
    """
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(chat_history, f, indent=2, ensure_ascii=False)
        print(f"Chat history saved to {filename}")
    except Exception as e:
        print(f"Error saving chat history: {e}")

# --- RAG WORKFLOW ---

query = "Explique-moi l'architecture du syst√®me bancaire DARA."

# 1. Generate alternative queries (optional)
alternatives = generate_alternative_queries(query)

# 2. Retrieve documents
context = retriever.get_relevant_documents(query)

# 3. Generate final answer
answer = generate_response(query, context)

# 4. Generate explanation of the answer
explanation = generate_answer_explanation(query, answer, context)

# 5. Evaluate the RAG response
evaluation = evaluate_rag_response(query, answer, context)

# 6. Extract source files
sources = extract_source_files(context)

# 7. Update and save retriever history
retriever.update_history(query, answer)
retriever.save_history()

# 8. (Optional) Save full chat history
chat_history = {
    "query": query,
    "alternative_queries": alternatives,
    "answer": answer,
    "explanation": explanation,
    "evaluation": evaluation,
    "sources": sources
}
save_chat_history(chat_history)

# --- OUTPUT ---
print("Answer:", answer)
print("Explanation:", explanation)
print("Evaluation:", evaluation)
print("Sources:", sources)
