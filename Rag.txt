import os
import pandas as pd
from openpyxl import load_workbook
from openpyxl.cell import MergedCell
from pathlib import Path

def get_writable_cell(ws, row, col):
    """Ensure we're writing to the actual (non-read-only) cell even if it's part of a merged cell."""
    cell = ws.cell(row=row, column=col)
    if isinstance(cell, MergedCell):
        for merged in ws.merged_cells.ranges:
            if (row, col) in merged.cells:
                return ws.cell(row=merged.min_row, column=merged.min_col)
    return cell

def find_merged_column_by_text(ws, header_lines, target_text):
    """Finds the column index where the multi-line (or merged) header matches the target text."""
    max_col = ws.max_column
    for col in range(1, max_col + 1):
        header_parts = []
        for row_offset in range(header_lines):
            val = ws.cell(row=row_offset + 1, column=col).value
            if val:
                header_parts.append(str(val).strip())
        full_header = " ".join(header_parts)
        if target_text.strip() in full_header:
            return col
    return None

def collect_excel_files(folder):
    return list(Path(folder).rglob("*.xlsx"))

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° d'inscription", "N° du registre du commerce",
        "السجل التجاري", "رقم السجل التجاري", "RC",
        "رقم التسجيل", "السجل التجاري", "Registre de commerce (extract)"
    ]

    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاریخ اخر توطين بنكي لعمليات استيراد"

    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    excel_files = collect_excel_files(excel_folder)

    for file_path in excel_files:
        input_path = str(file_path)
        output_path = os.path.join(output_folder, os.path.relpath(input_path, excel_folder))
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        print(f"\n📄 Processing: {input_path}")
        wb = load_workbook(input_path)
        updated = False

        for sheetname in wb.sheetnames:
            ws = wb[sheetname]
            header_row = None
            header_map = {}

            for i in range(1, 51):
                row_vals = [str(cell.value).strip() if cell.value else "" for cell in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row:
                print(f"⚠️ No RC column found in {input_path} / Sheet: {sheetname}")
                continue

            header_map["loan_date"] = find_merged_column_by_text(ws, 2, loan_date_header)
            header_map["import_date"] = find_merged_column_by_text(ws, 2, import_date_header)

            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                val = str(cell.value).strip()
                if val == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif val == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            row_num = header_row + 2
            while True:
                rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                rc = rc_cell.value
                if rc is None:
                    break

                rc_key = str(rc).strip()
                matched = rc_key in csv_df.index

                for csv_col, (field_key, yn_val) in csv_column_map.items():
                    if "yn" in field_key:
                        yes_col = header_map.get(f"{field_key}_yes")
                        no_col = header_map.get(f"{field_key}_no")
                        if yes_col and no_col:
                            yes_cell = get_writable_cell(ws, row_num, yes_col)
                            no_cell = get_writable_cell(ws, row_num, no_col)

                            if matched:
                                val = csv_df.at[rc_key, csv_col]
                                if isinstance(val, str) and val.strip().upper() == "X":
                                    if yn_val == "نعم":
                                        yes_cell.value = "✓"
                                    elif yn_val == "لا":
                                        no_cell.value = "✓"
                                    updated = True
                            else:
                                if not yes_cell.value and not no_cell.value:
                                    no_cell.value = "✓"
                                    updated = True

                    elif "date" in field_key and matched:
                        date_col = header_map.get(field_key)
                        if date_col:
                            date_val = csv_df.at[rc_key




import os
import pandas as pd
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter
from openpyxl.cell import MergedCell
from pathlib import Path

def find_merged_column_by_text(ws, header_lines, target_text):
    max_col = ws.max_column
    for col in range(1, max_col + 1):
        header_parts = []
        for row_offset in range(header_lines):
            val = ws.cell(row=row_offset + 1, column=col).value
            if val:
                header_parts.append(str(val).strip())
        full_header = " ".join(header_parts)
        if target_text.strip() in full_header:
            return col
    return None

def collect_excel_files(folder):
    return list(Path(folder).rglob("*.xlsx"))

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° d'inscription", "N° du registre du commerce",
        "السجل التجاري", "رقم السجل التجاري", "RC",
        "رقم التسجيل", "السجل التجاري", "Registre de commerce (extract)"
    ]

    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاریخ اخر توطين بنكي لعمليات استيراد"

    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    excel_files = collect_excel_files(excel_folder)

    for file_path in excel_files:
        input_path = str(file_path)
        output_path = os.path.join(output_folder, os.path.relpath(input_path, excel_folder))
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        print(f"\n📄 Processing: {input_path}")
        wb = load_workbook(input_path)
        updated = False

        for sheetname in wb.sheetnames:
            ws = wb[sheetname]
            header_row = None
            header_map = {}

            # Dynamically find the header row by looking for an RC column
            for i in range(1, 51):  # Scan first 50 rows
                row_vals = [str(cell.value).strip() if cell.value else "" for cell in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row:
                print(f"⚠️ No RC column found in {input_path} / Sheet: {sheetname}")
                continue

            # Find merged/multi-line header columns
            header_map["loan_date"] = find_merged_column_by_text(ws, 2, loan_date_header)
            header_map["import_date"] = find_merged_column_by_text(ws, 2, import_date_header)

            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                val = str(cell.value).strip()
                if val == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif val == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            # Fill in data starting below header
            row_num = header_row + 2
            while True:
                try:
                    rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                except:
                    break  # End of table
                rc = rc_cell.value
                if rc is None:
                    break

                rc_key = str(rc).strip()
                matched = rc_key in csv_df.index

                for csv_col, (field_key, yn_val) in csv_column_map.items():
                    if "yn" in field_key:
                        yes_col = header_map.get(f"{field_key}_yes")
                        no_col = header_map.get(f"{field_key}_no")
                        if yes_col and no_col:
                            yes_cell = ws.cell(row=row_num, column=yes_col)
                            no_cell = ws.cell(row=row_num, column=no_col)

                            if matched:
                                val = csv_df.at[rc_key, csv_col]
                                if isinstance(val, str) and val.strip().upper() == "X":
                                    if yn_val == "نعم":
                                        yes_cell.value = "✓"
                                    elif yn_val == "لا":
                                        no_cell.value = "✓"
                                    updated = True
                            else:
                                if not yes_cell.value and not no_cell.value:
                                    no_cell.value = "✓"
                                    updated = True

                    elif "date" in field_key and matched:
                        date_col = header_map.get(field_key)
                        if date_col:
                            date_val = csv_df.at[rc_key, csv_col]
                            if isinstance(date_val, str) and date_val.strip():
                                ws.cell(row=row_num, column=date_col).value = date_val
                                updated = True

                row_num += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print("ℹ️ No updates made.")

        wb.close()







import os
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook

def find_merged_column_by_text(ws, header_lines, target_text):
    """Find column that contains a merged or multi-row header with target text."""
    max_col = ws.max_column
    for col in range(1, max_col + 1):
        header_parts = []
        for row_offset in range(header_lines):
            val = ws.cell(row=row_offset + 1, column=col).value
            if isinstance(val, str):
                header_parts.append(val.strip())
        full_header = " ".join(header_parts)
        if target_text.strip() in full_header:
            return col
    return None

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    # RC column headers (multiple possibilities)
    rc_cols = [
        "N° d'inscription", "N° du registre du commerce", "السجل التجاري",
        "رقم السجل التجاري", "RC", "رقم ست", "رقم التسجيل",
        "Registre de commerce (extracted"
    ]

    # Header labels for merged columns
    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاريخ اخر توطين بنكي لعمليات استيراد"

    # CSV mapping to Excel logic
    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    # Load CSV
    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    # Gather all Excel files (recursively)
    excel_files = list(Path(excel_folder).rglob("*.xlsx"))

    for file_path in excel_files:
        input_path = str(file_path)
        relative_path = file_path.relative_to(excel_folder)
        output_path = os.path.join(output_folder, str(relative_path))
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        print(f"\n📄 Processing: {input_path}")
        wb = load_workbook(input_path)
        updated = False

        for sheetname in wb.sheetnames:
            ws = wb[sheetname]
            header_row = None
            header_map = {}

            # Detect RC header row and column
            for i in range(1, 51):
                row_vals = [
                    str(cell.value).strip() if isinstance(cell.value, str) else ""
                    for cell in ws[i]
                ]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row:
                print(f"⚠️ No RC column found in {input_path} / Sheet: {sheetname}")
                continue

            # Locate merged or multi-line headers
            header_map["loan_date"] = find_merged_column_by_text(ws, 2, loan_date_header)
            header_map["import_date"] = find_merged_column_by_text(ws, 2, import_date_header)

            for merged in ws.merged_cells.ranges:
                val = ws.cell(row=header_row, column=merged.min_col).value
                if not isinstance(val, str):
                    continue
                val = val.strip()
                if val == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif val == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            # Process each row of data
            row_num = header_row + 2
            while True:
                rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                rc = rc_cell.value
                if rc is None:
                    break

                rc_key = str(rc).strip()
                matched = rc_key in csv_df.index

                for csv_col, (field_key, yn_val) in csv_column_map.items():
                    if "yn" in field_key:
                        yes_col = header_map.get(f"{field_key}_yes")
                        no_col = header_map.get(f"{field_key}_no")

                        if yes_col and no_col:
                            yes_cell = ws.cell(row=row_num, column=yes_col)
                            no_cell = ws.cell(row=row_num, column=no_col)

                            val = csv_df.at[rc_key, csv_col] if matched else ""
                            val = str(val).strip().upper() if isinstance(val, str) else ""

                            if matched and val == "X":
                                if yn_val == "نعم":
                                    yes_cell.value = "✓"
                                elif yn_val == "لا":
                                    no_cell.value = "✓"
                                updated = True
                            elif not matched and not yes_cell.value and not no_cell.value:
                                no_cell.value = "✓"
                                updated = True

                    elif "date" in field_key and matched:
                        date_col = header_map.get(field_key)
                        if date_col:
                            date_val = csv_df.at[rc_key, csv_col]
                            if isinstance(date_val, str) and date_val.strip():
                                ws.cell(row=row_num, column=date_col).value = date_val.strip()
                                updated = True

                row_num += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print("ℹ️ No updates made.")

        wb.close()





import os
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.worksheet.cell_range import CellRange

def get_top_left_cell(ws, row, col):
    for rng in ws.merged_cells.ranges:
        if (row, col) in CellRange(str(rng)):
            return ws.cell(row=rng.min_row, column=rng.min_col)
    return ws.cell(row=row, column=col)

def find_merged_column_by_text(ws, header_lines, target_text):
    for col in range(1, ws.max_column + 1):
        header_parts = []
        for row_offset in range(header_lines):
            val = ws.cell(row=row_offset + 1, column=col).value
            if val:
                header_parts.append(str(val).strip())
        full_header = " ".join(header_parts)
        if target_text.strip() in full_header:
            return col
    return None

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° d'inscription", "N° du registre du commerce", "السجل التجاري", 
        "رقم السجل التجاري", "RC", "رقم ست", "رقم التسجيل", 
        "Registre de commerce (extracted)"
    ]

    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاريخ اخر توطين بنكي لعمليات استيراد"

    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    excel_files = list(Path(excel_folder).rglob("*.xlsx"))

    for file_path in excel_files:
        input_path = str(file_path)
        relative_path = file_path.relative_to(excel_folder)
        output_path = os.path.join(output_folder, str(relative_path))
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        print(f"\n📄 Processing: {input_path}")
        wb = load_workbook(input_path)
        updated = False

        for sheetname in wb.sheetnames:
            ws = wb[sheetname]
            header_row = None
            header_map = {}

            # Find RC header row
            for i in range(1, 51):
                row_vals = [str(cell.value).strip() if cell.value else "" for cell in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row:
                print(f"⚠️ No RC header found in {input_path} / Sheet: {sheetname}")
                continue

            # Find other headers
            header_map["loan_date"] = find_merged_column_by_text(ws, 2, loan_date_header)
            header_map["import_date"] = find_merged_column_by_text(ws, 2, import_date_header)

            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                val = str(cell.value).strip()
                if val == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif val == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            # Process rows
            row_num = header_row + 2
            while True:
                rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                rc_val = rc_cell.value
                if rc_val is None:
                    break
                rc_key = str(rc_val).strip()
                matched = rc_key in csv_df.index

                for csv_col, (field_key, yn_val) in csv_column_map.items():
                    if "yn" in field_key:
                        yes_col = header_map.get(f"{field_key}_yes")
                        no_col = header_map.get(f"{field_key}_no")
                        if yes_col and no_col:
                            yes_cell = get_top_left_cell(ws, row_num, yes_col)
                            no_cell = get_top_left_cell(ws, row_num, no_col)

                            if matched:
                                value = csv_df.at[rc_key, csv_col]
                                if isinstance(value, str) and value.strip().upper() == "X":
                                    if yn_val == "نعم":
                                        yes_cell.value = "✓"
                                    elif yn_val == "لا":
                                        no_cell.value = "✓"
                                    updated = True
                            elif not yes_cell.value and not no_cell.value:
                                no_cell.value = "/"
                                updated = True

                    elif "date" in field_key and matched:
                        date_col = header_map.get(field_key)
                        if date_col:
                            date_val = csv_df.at[rc_key, csv_col]
                            if isinstance(date_val, str) and date_val.strip():
                                target_cell = get_top_left_cell(ws, row_num, date_col)
                                target_cell.value = date_val
                                updated = True

                row_num += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print(f"ℹ️ No updates in: {input_path}")
        wb.close()




import os
import pandas as pd
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.worksheet.cell_range import CellRange

def get_top_left_cell(ws, row, col):
    """Return the top-left cell if part of a merged cell."""
    for rng in ws.merged_cells.ranges:
        if (row, col) in CellRange(str(rng)):
            return ws.cell(row=rng.min_row, column=rng.min_col)
    return ws.cell(row=row, column=col)

def find_merged_column_by_text(ws, header_lines, target_text):
    """Find a column whose combined multiline header matches the given text."""
    for col in range(1, ws.max_column + 1):
        parts = []
        for row in range(header_lines):
            val = ws.cell(row=row + 1, column=col).value
            if val:
                parts.append(str(val).strip())
        if target_text.strip() in " ".join(parts):
            return col
    return None

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° d'inscription", "N° du registre du commerce", "السجل التجاري", "رقم السجل التجاري",
        "RC", "رقم ست", "رقم التسجيل", "Registre de commerce (extracted)"
    ]

    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاريخ اخر توطين بنكي لعمليات استيراد"

    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    excel_files = list(Path(excel_folder).rglob("*.xlsx"))

    for file_path in excel_files:
        input_path = str(file_path)
        relative_path = file_path.relative_to(excel_folder)
        output_path = os.path.join(output_folder, str(relative_path))
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        wb = load_workbook(input_path)
        updated = False

        for sheetname in wb.sheetnames:
            ws = wb[sheetname]
            header_row = None
            header_map = {}

            # Detect header row
            for i in range(1, 51):
                row_vals = [str(cell.value).strip() if cell.value else "" for cell in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row:
                print(f"⚠️ No RC header found in {input_path} / Sheet: {sheetname}")
                continue

            # Map headers
            header_map["loan_date"] = find_merged_column_by_text(ws, 2, loan_date_header)
            header_map["import_date"] = find_merged_column_by_text(ws, 2, import_date_header)

            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                val = str(cell.value).strip()
                if val == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif val == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            # Start filling data
            row_num = header_row + 2
            while True:
                rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                rc_val = rc_cell.value
                if rc_val is None:
                    break
                rc_key = str(rc_val).strip()
                matched = rc_key in csv_df.index

                for csv_col, (field_key, yn_val) in csv_column_map.items():
                    if "yn" in field_key:
                        yes_col = header_map.get(f"{field_key}_yes")
                        no_col = header_map.get(f"{field_key}_no")
                        if yes_col and no_col:
                            yes_cell = get_top_left_cell(ws, row_num, yes_col)
                            no_cell = get_top_left_cell(ws, row_num, no_col)

                            if matched:
                                val = str(csv_df.at[rc_key, csv_col]).strip().upper()
                                if val == "X":
                                    if yn_val == "نعم":
                                        yes_cell.value = "✓"
                                    elif yn_val == "لا":
                                        no_cell.value = "✓"
                                    updated = True
                            elif not yes_cell.value and not no_cell.value:
                                no_cell.value = "/"
                                updated = True

                    elif "date" in field_key and matched:
                        date_col = header_map.get(field_key)
                        if date_col:
                            date_val = str(csv_df.at[rc_key, csv_col]).strip()
                            if date_val:
                                target_cell = get_top_left_cell(ws, row_num, date_col)
                                target_cell.value = date_val
                                updated = True

                row_num += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print(f"ℹ️ No updates in: {input_path}")
        wb.close()










import os
import pandas as pd
from openpyxl import load_workbook
from openpyxl.worksheet.cell_range import CellRange

def get_top_left_merged_cell(ws, row, col):
    """Return top-left cell of a merged cell range or the cell itself."""
    for merged_range in ws.merged_cells.ranges:
        if (row, col) in CellRange(str(merged_range)):
            return ws.cell(row=merged_range.min_row, column=merged_range.min_col)
    return ws.cell(row=row, column=col)

def find_column_by_header(ws, header_lines, target_text):
    """Find column index matching multi-line or merged header text."""
    for col in range(1, ws.max_column + 1):
        header_parts = []
        for r in range(header_lines):
            val = ws.cell(row=r + 1, column=col).value
            if val:
                header_parts.append(str(val).strip())
        if target_text.strip() in " ".join(header_parts):
            return col
    return None

def collect_excel_files(folder):
    """Recursively find all Excel files in subdirectories."""
    paths = []
    for root, _, files in os.walk(folder):
        for f in files:
            if f.endswith(".xlsx"):
                paths.append(os.path.join(root, f))
    return paths

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° du registre du commerce", "السجل التجاري", "رقم السجل التجاري",
        "Registre de commerce (extract)", "راد من ترقد السعيد, رقم السجل التجاري", "RC"
    ]

    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاریخ اخر بتوطين بنكي لعمليات استيراد"

    csv_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    for path in collect_excel_files(excel_folder):
        file = os.path.basename(path)
        output_path = os.path.join(output_folder, file)
        print(f"\n📄 Processing: {file}")
        wb = load_workbook(path)
        updated = False

        for sheet in wb.sheetnames:
            ws = wb[sheet]
            header_row = None
            header_map = {}

            # Find RC header row
            for i in range(1, 51):
                row_vals = [str(c.value).strip() if c.value else "" for c in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row:
                print(f"⚠️ No RC header in {file} / Sheet: {sheet}")
                continue

            # Find header columns (merged or multiline)
            header_map["loan_date"] = find_column_by_header(ws, 2, loan_date_header)
            header_map["import_date"] = find_column_by_header(ws, 2, import_date_header)

            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                name = str(cell.value).strip()
                if name == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif name == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            # Fill data
            row = header_row + 2
            while True:
                rc_cell = ws.cell(row=row, column=header_map["Registre_commerce"] + 1)
                if not rc_cell.value:
                    break

                rc_key = str(rc_cell.value).strip()
                matched = rc_key in csv_df.index

                for csv_col, (prefix, yn_val) in csv_map.items():
                    if "yn" in prefix:
                        yes_col = header_map.get(f"{prefix}_yes")
                        no_col = header_map.get(f"{prefix}_no")
                        if yes_col and no_col:
                            yes_cell = get_top_left_merged_cell(ws, row, yes_col)
                            no_cell = get_top_left_merged_cell(ws, row, no_col)

                            if matched:
                                val = str(csv_df.at[rc_key, csv_col]).strip().upper()
                                if val == "X":
                                    if yn_val == "نعم":
                                        yes_cell.value = "✓"
                                    elif yn_val == "لا":
                                        no_cell.value = "✓"
                                    updated = True
                            elif not yes_cell.value and not no_cell.value:
                                no_cell.value = "/"
                                updated = True

                    elif "date" in prefix and matched:
                        col = header_map.get(prefix)
                        if col:
                            date_val = str(csv_df.at[rc_key, csv_col]).strip()
                            if date_val:
                                target_cell = get_top_left_merged_cell(ws, row, col)
                                target_cell.value = date_val
                                updated = True

                row += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print("ℹ️ No updates made.")
        wb.close()




import os
import pandas as pd
from openpyxl import load_workbook
from openpyxl.worksheet.cell_range import CellRange

def get_top_left_merged_cell(ws, row, col):
    """Safely get the writable top-left cell if part of a merged cell."""
    for merged_range in ws.merged_cells.ranges:
        if (row, col) in CellRange(str(merged_range)):
            return ws.cell(row=merged_range.min_row, column=merged_range.min_col)
    return ws.cell(row=row, column=col)

def find_column_by_header(ws, header_lines, target_text):
    """Find column by checking multiple header lines for target_text."""
    for col in range(1, ws.max_column + 1):
        header_parts = []
        for r in range(header_lines):
            val = ws.cell(row=r + 1, column=col).value
            if val:
                header_parts.append(str(val).strip())
        if target_text.strip() in " ".join(header_parts):
            return col
    return None

def collect_excel_files(folder):
    """Recursively collect all Excel file paths."""
    paths = []
    for root, _, files in os.walk(folder):
        for f in files:
            if f.endswith(".xlsx"):
                paths.append(os.path.join(root, f))
    return paths

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° du registre du commerce", "السجل التجاري", "رقم السجل التجاري",
        "Registre de commerce (extract)", "راد من ترقد السعيد, رقم السجل التجاري", "RC"
    ]

    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاریخ اخر بتوطين بنكي لعمليات استيراد"

    csv_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ CSV missing 'Registre_commerce' column.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    for path in collect_excel_files(excel_folder):
        file = os.path.basename(path)
        output_path = os.path.join(output_folder, file)
        print(f"\n📄 Processing: {file}")
        wb = load_workbook(path)
        updated = False

        for sheet in wb.sheetnames:
            ws = wb[sheet]
            header_row = None
            header_map = {}

            # Detect RC column
            for i in range(1, 51):
                row_vals = [str(c.value).strip() if c.value else "" for c in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break
            if not header_row:
                print(f"⚠️ No RC column in {file} / Sheet: {sheet}")
                continue

            # Detect columns (merged/multiline)
            header_map["loan_date"] = find_column_by_header(ws, 2, loan_date_header)
            header_map["import_date"] = find_column_by_header(ws, 2, import_date_header)

            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                name = str(cell.value).strip()
                if name == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif name == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            # Iterate data rows
            row = header_row + 2
            while True:
                rc_cell = ws.cell(row=row, column=header_map["Registre_commerce"] + 1)
                if not rc_cell.value:
                    break
                rc_key = str(rc_cell.value).strip()
                matched = rc_key in csv_df.index

                for csv_col, (prefix, yn_val) in csv_map.items():
                    if "yn" in prefix:
                        yes_col = header_map.get(f"{prefix}_yes")
                        no_col = header_map.get(f"{prefix}_no")
                        if yes_col and no_col:
                            yes_cell = get_top_left_merged_cell(ws, row, yes_col)
                            no_cell = get_top_left_merged_cell(ws, row, no_col)

                            if matched:
                                value = str(csv_df.at[rc_key, csv_col]).strip().upper()
                                if value == "X":
                                    if yn_val == "نعم":
                                        yes_cell.value = "✓"
                                    elif yn_val == "لا":
                                        no_cell.value = "✓"
                                    updated = True
                            elif not yes_cell.value and not no_cell.value:
                                no_cell.value = "/"
                                updated = True

                    elif "date" in prefix and matched:
                        col = header_map.get(prefix)
                        if col:
                            date_val = str(csv_df.at[rc_key, csv_col]).strip()
                            if date_val:
                                ws.cell(row=row, column=col).value = date_val
                                updated = True

                row += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print("ℹ️ No updates made.")
        wb.close()



import os
import pandas as pd
from openpyxl import load_workbook
from openpyxl.cell import MergedCell

def get_real_cell(ws, row, col):
    """Always return the writable (non-MergedCell) cell at (row, col)."""
    cell = ws.cell(row=row, column=col)
    if isinstance(cell, MergedCell):
        return ws.cell(row=row, column=col)
    return cell

def find_merged_column_by_text(ws, header_lines, target_text):
    max_col = ws.max_column
    for col in range(1, max_col + 1):
        header_parts = []
        for row in range(header_lines):
            val = ws.cell(row=row + 1, column=col).value
            if val:
                header_parts.append(str(val).strip())
        full_header = " ".join(header_parts)
        if target_text.strip() in full_header:
            return col
    return None

def collect_excel_files(folder):
    excel_files = []
    for root, _, files in os.walk(folder):
        for file in files:
            if file.endswith(".xlsx"):
                excel_files.append(os.path.join(root, file))
    return excel_files

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° du registre du commerce",
        "السجل التجاري",
        "رقم السجل التجاري",
        "Registre de commerce (extract)",
        "راد من ترقد السعيد, رقم السجل التجاري",
        "RC"
    ]

    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاریخ اخر بتوطين بنكي لعمليات استيراد"

    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    all_excel_files = collect_excel_files(excel_folder)

    for input_path in all_excel_files:
        file = os.path.basename(input_path)
        output_path = os.path.join(output_folder, file)
        print(f"\n📄 Processing: {file}")

        wb = load_workbook(input_path)
        updated = False

        for sheetname in wb.sheetnames:
            ws = wb[sheetname]
            header_row = None
            header_map = {}

            for i in range(1, 51):
                row_vals = [str(cell.value).strip() if cell.value else "" for cell in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row or "Registre_commerce" not in header_map:
                print(f"⚠️ No RC header found in {file} / Sheet: {sheetname}")
                continue

            header_map["loan_date"] = find_merged_column_by_text(ws, 2, loan_date_header)
            header_map["import_date"] = find_merged_column_by_text(ws, 2, import_date_header)

            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                val = str(cell.value).strip()
                if val == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif val == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            row_num = header_row + 2
            while True:
                rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                rc = rc_cell.value
                if rc is None:
                    break

                rc_key = str(rc).strip()
                matched = rc_key in csv_df.index

                for csv_col, (field_key, yn_val) in csv_column_map.items():
                    if "yn" in field_key:
                        yes_col = header_map.get(f"{field_key}_yes")
                        no_col = header_map.get(f"{field_key}_no")
                        if yes_col and no_col:
                            if matched:
                                cell_val = str(csv_df.at[rc_key, csv_col]).strip().upper()
                                if cell_val == "X":
                                    if yn_val == "نعم":
                                        get_real_cell(ws, row_num, yes_col).value = "✓"
                                    elif yn_val == "لا":
                                        get_real_cell(ws, row_num, no_col).value = "✓"
                                    updated = True
                            else:
                                if not ws.cell(row=row_num, column=yes_col).value and not ws.cell(row=row_num, column=no_col).value:
                                    get_real_cell(ws, row_num, no_col).value = "✓"
                                    updated = True

                    elif "date" in field_key and matched:
                        date_col = header_map.get(field_key)
                        if date_col:
                            date_val = str(csv_df.at[rc_key, csv_col]).strip()
                            if date_val:
                                get_real_cell(ws, row_num, date_col).value = date_val
                                updated = True

                row_num += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print("ℹ️ No updates made.")

        wb.close()
