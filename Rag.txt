import os
import pandas as pd
from openpyxl import load_workbook
from openpyxl.cell import MergedCell

def get_real_cell(ws, cell):
    """Return the writable top-left cell if the target is a merged cell."""
    if isinstance(cell, MergedCell):
        return ws.cell(row=cell.row, column=cell.column)
    return cell

def find_merged_column_by_text(ws, header_lines, target_text):
    """Finds the column index where the multi-line (or merged) header matches the target text."""
    max_col = ws.max_column
    for col in range(1, max_col + 1):
        header_parts = []
        for row_offset in range(header_lines):
            val = ws.cell(row=row_offset + 1, column=col).value
            if val:
                header_parts.append(str(val).strip())
        full_header = " ".join(header_parts)
        if target_text.strip() in full_header:
            return col
    return None

def collect_excel_files(folder):
    """Recursively collect all Excel file paths inside the folder."""
    excel_files = []
    for root, _, files in os.walk(folder):
        for file in files:
            if file.endswith(".xlsx"):
                excel_files.append(os.path.join(root, file))
    return excel_files

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° du registre du commerce",
        "السجل التجاري",
        "رقم السجل التجاري",
        "Registre de commerce (extract)",
        "راد من ترقد السعيد, رقم السجل التجاري",
        "RC"
    ]

    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاریخ اخر بتوطين بنكي لعمليات استيراد"

    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    # Load CSV data
    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    all_excel_files = collect_excel_files(excel_folder)

    for input_path in all_excel_files:
        file = os.path.basename(input_path)
        output_path = os.path.join(output_folder, file)
        print(f"\n📄 Processing: {file}")

        wb = load_workbook(input_path)
        updated = False

        for sheetname in wb.sheetnames:
            ws = wb[sheetname]
            header_row = None
            header_map = {}

            # Find header row with RC column
            for i in range(1, 51):
                row_vals = [str(cell.value).strip() if cell.value else "" for cell in ws[i]]
                for idx, val in enumerate(row_vals):
                    if val in rc_cols:
                        header_row = i
                        header_map["Registre_commerce"] = idx
                        break
                if header_row:
                    break

            if not header_row or "Registre_commerce" not in header_map:
                print(f"⚠️ No RC header found in {file} / Sheet: {sheetname}")
                continue

            # Handle multi-line header detection
            header_map["loan_date"] = find_merged_column_by_text(ws, 2, loan_date_header)
            header_map["import_date"] = find_merged_column_by_text(ws, 2, import_date_header)

            # Detect merged "نعم / لا" column positions
            for merged in ws.merged_cells.ranges:
                cell = ws.cell(row=header_row, column=merged.min_col)
                if not cell.value:
                    continue
                val = str(cell.value).strip()
                if val == loan_yn_header:
                    header_map["loan_yn_yes"] = merged.min_col
                    header_map["loan_yn_no"] = merged.min_col + 1
                elif val == import_yn_header:
                    header_map["import_yn_yes"] = merged.min_col
                    header_map["import_yn_no"] = merged.min_col + 1

            # Loop through each row and fill values
            row_num = header_row + 2
            while True:
                rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                rc = rc_cell.value
                if rc is None:
                    break

                rc_key = str(rc).strip()
                matched = rc_key in csv_df.index

                for csv_col, (field_key, yn_val) in csv_column_map.items():
                    if "yn" in field_key:
                        yes_col = header_map.get(f"{field_key}_yes")
                        no_col = header_map.get(f"{field_key}_no")
                        if yes_col and no_col:
                            yes_cell = ws.cell(row=row_num, column=yes_col)
                            no_cell = ws.cell(row=row_num, column=no_col)

                            if matched:
                                cell_val = csv_df.at[rc_key, csv_col].strip().upper()
                                if cell_val == "X":
                                    if yn_val == "نعم":
                                        get_real_cell(ws, yes_cell).value = "✓"
                                    elif yn_val == "لا":
                                        get_real_cell(ws, no_cell).value = "✓"
                                    updated = True
                            elif not yes_cell.value and not no_cell.value:
                                get_real_cell(ws, no_cell).value = "✓"
                                updated = True

                    elif "date" in field_key and matched:
                        date_col = header_map.get(field_key)
                        if date_col:
                            date_val = csv_df.at[rc_key, csv_col].strip()
                            if date_val:
                                get_real_cell(ws, ws.cell(row=row_num, column=date_col)).value = date_val
                                updated = True

                row_num += 1

        if updated:
            wb.save(output_path)
            print(f"✅ Saved: {output_path}")
        else:
            print("ℹ️ No updates made.")

        wb.close()







import os
import pandas as pd
from openpyxl import load_workbook

def find_merged_column_by_text(ws, header_lines, target_text):
    """Search across multiple header rows for a target merged/multiline column title."""
    max_col = ws.max_column
    for col in range(1, max_col + 1):
        header_parts = []
        for row_offset in range(header_lines):
            val = ws.cell(row=row_offset + 1, column=col).value
            if val:
                header_parts.append(str(val).strip())
        full_header = " ".join(header_parts)
        if target_text.strip() in full_header:
            return col
    return None

def fill_excel_from_csv(csv_path, excel_folder, output_folder):
    os.makedirs(output_folder, exist_ok=True)

    rc_cols = [
        "N° du registre du commerce",
        "السجل التجاري",
        "رقم السجل التجاري",
        "Registre de commerce (extract)",
        "راد من ترقد السعيد, رقم السجل التجاري",
        "RC"
    ]

    # Headers in Arabic
    loan_yn_header = "هل استفاد المتعامل الاقتصادي من قرض بنكي"
    import_yn_header = "هل قام المتعامل الاقتصادي بتوطين بنكي لعمليات استيراد"
    loan_date_header = "تاريخ اخر استفادة من قرض بنكي"
    import_date_header = "تاریخ اخر بتوطين بنكي لعمليات استيراد"

    # Mapping from CSV columns
    csv_column_map = {
        "beneficiaire credit Oui": ("loan_yn", "نعم"),
        "beneficiaire credit Non": ("loan_yn", "لا"),
        "Operation import Oui": ("import_yn", "نعم"),
        "Operation import Non": ("import_yn", "لا"),
        "Derniere date effet crédit": ("loan_date", None),
        "Derniere date import": ("import_date", None),
    }

    # Load CSV
    csv_df = pd.read_csv(csv_path, dtype=str).fillna("")
    if "Registre_commerce" not in csv_df.columns:
        print("❌ 'Registre_commerce' column missing in CSV.")
        return
    csv_df.set_index("Registre_commerce", inplace=True)

    for root, _, files in os.walk(excel_folder):
        for file in files:
            if not file.endswith(".xlsx"):
                continue

            input_path = os.path.join(root, file)
            relative_path = os.path.relpath(root, excel_folder)
            output_dir = os.path.join(output_folder, relative_path)
            os.makedirs(output_dir, exist_ok=True)
            output_path = os.path.join(output_dir, file)

            print(f"\n📄 Processing: {input_path}")

            wb = load_workbook(input_path)
            updated = False

            for sheetname in wb.sheetnames:
                ws = wb[sheetname]
                header_row = None
                header_map = {}

                # Find header row by RC column
                for i in range(1, 51):
                    row_vals = [str(cell.value).strip() if cell.value else "" for cell in ws[i]]
                    for idx, val in enumerate(row_vals):
                        if val in rc_cols:
                            header_row = i
                            header_map["Registre_commerce"] = idx
                            break
                    if header_row:
                        break

                if not header_row or "Registre_commerce" not in header_map:
                    print(f"⚠️ No RC header found in {file} / Sheet: {sheetname}")
                    continue

                # Get date columns
                header_map["loan_date"] = find_merged_column_by_text(ws, 2, loan_date_header)
                header_map["import_date"] = find_merged_column_by_text(ws, 2, import_date_header)

                # Get yes/no merged headers
                for merged in ws.merged_cells.ranges:
                    cell = ws.cell(row=header_row, column=merged.min_col)
                    if not cell.value:
                        continue
                    val = str(cell.value).strip()
                    if val == loan_yn_header:
                        header_map["loan_yn_yes"] = merged.min_col
                        header_map["loan_yn_no"] = merged.min_col + 1
                    elif val == import_yn_header:
                        header_map["import_yn_yes"] = merged.min_col
                        header_map["import_yn_no"] = merged.min_col + 1

                # Fill data
                row_num = header_row + 2
                while True:
                    rc_cell = ws.cell(row=row_num, column=header_map["Registre_commerce"] + 1)
                    rc = rc_cell.value
                    if rc is None:
                        break

                    rc_key = str(rc).strip()
                    matched = rc_key in csv_df.index

                    for csv_col, (field_key, yn_val) in csv_column_map.items():
                        if "yn" in field_key:
                            yes_col = header_map.get(f"{field_key}_yes")
                            no_col = header_map.get(f"{field_key}_no")
                            if yes_col and no_col:
                                yes_cell = ws.cell(row=row_num, column=yes_col)
                                no_cell = ws.cell(row=row_num, column=no_col)

                                val = ""
                                if matched and csv_col in csv_df.columns:
                                    val = str(csv_df.at[rc_key, csv_col]).strip().upper()

                                if val == "X":
                                    if yn_val == "نعم":
                                        yes_cell.value = "✓"
                                    elif yn_val == "لا":
                                        no_cell.value = "✓"
                                    updated = True
                                elif not matched and not yes_cell.value and not no_cell.value:
                                    no_cell.value = "✓"
                                    updated = True

                        elif "date" in field_key and matched:
                            date_col = header_map.get(field_key)
                            if date_col:
                                date_val = str(csv_df.at[rc_key, csv_col]).strip()
                                if date_val:
                                    ws.cell(row=row_num, column=date_col).value = date_val
                                    updated = True

                    row_num += 1

            if updated:
                wb.save(output_path)
                print(f"✅ Saved: {output_path}")
            else:
                print("ℹ️ No updates made.")

            wb.close()
