RIGHT([YourField], 10) + " -" + LEFT([YourField], 5)



\b\d{2}/\d{2}-\d{2}[A-Da-d]\d{7}\b


LEFT([YourField],10) + "-" + MID([YourField],11,2) + "/00"



(?<![\dA-Za-z/-])\d{2}[A-Da-d]\d{7}-\d{2}(?![\dA-Za-z/-])



(?<![^\s])\d{2}[A-Da-d]\d{7}-\d{2}(?![^\s])



(?<![^\s])\d{2}[A-D]\d{7}(?![^\s])



(?<![\dA-Z/-])\d{2}[A-D]\d{7}(?![\d/-])




(?<![-/\d])\b\d{2}[A-D]\d{7}\b(?![-/\d])



(?<![-/\d])\b02[A-D]\d{7}\b(?![-/\d])



import re

def clean_register_commerce_v2(value):
    if not isinstance(value, str):
        return value

    value = value.strip().upper()

    # Step 1: Replace multiple slashes with a single slash
    value = re.sub(r"/{2,}", "/", value)

    # Step 2: Handle format like "16/A/1185168" or "01/A/113040 -01/05"
    match1 = re.match(r"^(\d{2})/([A-Z])/([0-9 ]+)(.*)", value)
    if match1:
        return match1.group(1) + match1.group(2) + match1.group(3) + match1.group(4)

    # Step 3: Handle format like "05/00-1125555A00" or "05/00/1125555A00"
    match2 = re.match(r"^(\d{2}/\d{2})[-/]?(\d+)([A-Z])(\d{2})$", value)
    if match2:
        return match2.group(4) + match2.group(3) + match2.group(2) + "-" + match2.group(1)

    return value  # Return original if no patterns matched









import re

def clean_register_commerce_v2(value):
    if not isinstance(value, str):
        return value

    value = value.strip().upper().replace(" ", " ")  # preserve intentional spaces

    # Clean up repeated slashes like "//A/"
    value = re.sub(r"/{2,}", "/", value)

    # Case 1: XX/A/NUMBER or similar
    match1 = re.match(r"^(\d{2})/([A-Z])/([0-9 ]+)(.*)", value)
    if match1:
        return match1.group(1) + match1.group(2) + match1.group(3) + match1.group(4)

    # Case 2: handles format like 05/00-1125555A00
    match2 = re.match(r"^(\d{2}/\d{2})-?(\d+)([A-Z])(\d{2})$", value)
    if match2:
        return match2.group(4) + match2.group(3) + match2.group(2) + "-" + match2.group(1)

    return value  # return unchanged if nothing matches







import re

def clean_register_commerce(value):
    if not isinstance(value, str):
        return value

    value = value.strip().upper().replace(" ", "")

    # Case 1: format like "16/A/1185168"
    match1 = re.match(r"^(\d{2})/([A-Z])/(\d+)$", value)
    if match1:
        return match1.group(1) + match1.group(2) + match1.group(3)

    # Case 2: format like "05/00-1125555A00"
    match2 = re.match(r"^(\d{2}/\d{2})-?(\d+)([A-Z])(\d{2})$", value)
    if match2:
        return match2.group(4) + match2.group(3) + match2.group(2) + "-" + match2.group(1)

    return value  # Return unchanged if format is not matched






def convert_arabic_to_french(text):
    if not isinstance(text, str):
        return text

    # If already well formatted (contains a Latin letter and no Arabic), return as is
    contains_latin = any(c.isalpha() and c.upper() in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' for c in text)
    contains_arabic = any('\u0600' <= c <= '\u06FF' for c in text)

    if contains_latin and not contains_arabic:
        return text  # Already formatted, skip transformation

    # Else: process Arabic version
    text = text.replace(" ", "")

    arabic_to_french = {
        "أ": "A", "ا": "A", "آ": "A",
        "ب": "B", "ت": "T", "ث": "S",
        "ج": "J", "ح": "H", "خ": "KH",
        "د": "D", "ذ": "DH", "ر": "R",
        "ز": "Z", "س": "S", "ش": "CH",
        "ص": "S", "ض": "D", "ط": "T",
        "ظ": "Z", "ع": "A", "غ": "GH",
        "ف": "F", "ق": "K", "ك": "K",
        "ل": "L", "م": "M", "ن": "N",
        "ه": "H", "و": "W", "ي": "Y"
    }

    digits = ''.join(c for c in text if c.isdigit())
    arabic_letters = ''.join(c for c in text if '\u0600' <= c <= '\u06FF')
    converted_letters = ''.join(arabic_to_french.get(c, c) for c in arabic_letters)

    first_two = digits[:2]
    remaining_digits = digits[2:]

    return first_two + converted_letters + remaining_digits






def convert_arabic_to_french(text):
    if not isinstance(text, str):
        return text

    text = text.replace(" ", "")

    arabic_to_french = {
        "أ": "A", "ا": "A", "آ": "A",
        "ب": "B", "ت": "T", "ث": "S",
        "ج": "J", "ح": "H", "خ": "KH",
        "د": "D", "ذ": "DH", "ر": "R",
        "ز": "Z", "س": "S", "ش": "CH",
        "ص": "S", "ض": "D", "ط": "T",
        "ظ": "Z", "ع": "A", "غ": "GH",
        "ف": "F", "ق": "K", "ك": "K",
        "ل": "L", "م": "M", "ن": "N",
        "ه": "H", "و": "W", "ي": "Y"
    }

    # Separate digits and Arabic letters
    digits = ''.join(c for c in text if c.isdigit())
    arabic_letters = ''.join(c for c in text if '\u0600' <= c <= '\u06FF')
    converted_letters = ''.join(arabic_to_french.get(c, c) for c in arabic_letters)

    # First 2 digits
    first_two = digits[:2]
    remaining_digits = digits[2:]

    return first_two + converted_letters + remaining_digits










import pandas as pd

# Your existing function
def convert_arabic_to_french(text):
    if not isinstance(text, str):
        return text

    text = text.replace(" ", "")

    arabic_to_french = {
        "أ": "A", "ا": "A", "آ": "A",
        "ب": "B", "ت": "T", "ث": "S",
        "ج": "J", "ح": "H", "خ": "KH",
        "د": "D", "ذ": "DH", "ر": "R",
        "ز": "Z", "س": "S", "ش": "CH",
        "ص": "S", "ض": "D", "ط": "T",
        "ظ": "Z", "ع": "A", "غ": "GH",
        "ف": "F", "ق": "K", "ك": "K",
        "ل": "L", "م": "M", "ن": "N",
        "ه": "H", "و": "W", "ي": "Y"
    }

    digits = ''.join(c for c in text if c.isdigit())[:2]
    arabic_letters = ''.join(c for c in text if '\u0600' <= c <= '\u06FF')
    converted_letters = ''.join(arabic_to_french.get(c, c) for c in arabic_letters)

    return digits + converted_letters

# Example DataFrame
df = pd.DataFrame({
    'original': ["22ب  ", "ب11", "آ33", "ب643", "أ9ز", "hello"]
})

# Apply function to column
df['converted'] = df['original'].apply(convert_arabic_to_french)





# Show result
print(df)
import pandas as pd
import unicodedata
import re

# Sample input
df = pd.DataFrame({
    'your_column': ["42 / 00 - 2641809111", None]
})

# Step 1: Fill missing values
df['your_column'] = df['your_column'].fillna('')

# Step 2: Normalize and remove ALL space-like Unicode characters
def remove_all_whitespace(text):
    # Normalize the string to NFKC form (to expose hidden chars)
    normalized = unicodedata.normalize('NFKC', text)
    # Remove ALL known whitespace characters and invisible formatting marks
    return re.sub(r'[\s\u200f\u200e\u200b\u00a0\u202f\u2060]+', '', normalized)

df['your_column'] = df['your_column'].apply(remove_all_whitespace)

print(df)



import pandas as pd
import re

# Sample DataFrame
df = pd.DataFrame({
    'your_column': ["0127 /01-0105182 ب", None, "   نهاد 123", "\u200fنص مع RTL"]  # note: includes Unicode spaces
})

# Step 1: Replace NaN/NA with empty string
df['your_column'] = df['your_column'].fillna('')

# Step 2: Remove ALL Unicode whitespace (includes Arabic RTL marks, zero-width spaces, etc.)
# \s matches visible whitespace, \u200f, \u200b, \xa0 etc. handled explicitly
df['your_column'] = df['your_column'].apply(
    lambda x: re.sub(r'[\s\u200f\u200e\u200b\u00a0]+', '', x)
)

print(df)


import pandas as pd

# Example DataFrame with Arabic and numbers
df = pd.DataFrame({
    'your_column': [" نهاد", "Sheu3873 43", "  ح ج h65", "\u200Fالسلام 123"]
})

# Remove all whitespace characters (normal and Unicode)
df['your_column'] = df['your_column'].apply(lambda x: ''.join(ch for ch in x if not ch.isspace()))

print(df)



import pandas as pd

# Example DataFrame
df = pd.DataFrame({
    'your_column': [" nihad", "Sheu3873 43", "  hg h65"]
})

# Remove all whitespace characters
df['your_column'] = df['your_column'].str.replace(r'\s+', '', regex=True)

print(df)

import pandas as pd

# Example DataFrame
df = pd.DataFrame({
    'your_column': [" nihad", "Sheu3873 43", "  hg h65"]
})

# Remove leading spaces
df['your_column'] = df['your_column'].str.lstrip()

print(df)


Bonjour [Nom],
Nous avions une réunion prévue aujourd’hui à 11h, mais vous n’étiez pas présent(e) et nous n’avons pas réussi à vous joindre.
Pouvez-vous me proposer un créneau pour reprogrammer notre échange ?





import pandas as pd

# Sample DataFrame with "Registre de commerce" values
df = pd.DataFrame({
    'registre': [
        'RC 1234567',
        'ر ق  ١٢٣ ٤٥ ٦',
        'Registre de commerce 123 456',
        'ر ق123456',
        'RC123 456',
        'ر ق 123456',
    ]
})

# Remove all spaces from the column
df['registre'] = df['registre'].str.replace(r'\s+', '', regex=True)

print(df)





import pandas as pd

# Sample DataFrame with "Registre de commerce" values
df = pd.DataFrame({
    'registre': [
        'RC 1234567',
        'ر ق  ١٢٣ ٤٥ ٦',
        'Registre de commerce 123 456',
        'ر ق123456',
        'RC123 456',
        'ر ق 123456',
    ]
})

# Remove all spaces from the column
df['registre'] = df['registre'].str.replace(r'\s+', '', regex=True)

print(df)

# Arabic letters pattern
arabic_letters = 'اأإآبتثجحخدذرزسشصضطظعغفقكلمنهوي'
pattern = f'([{arabic_letters}])\\s+'

# Remove only the space that comes after an Arabic letter
df['text'] = df['text'].str.replace(pattern, r'\1', regex=True)

print(df)




Objet : Demande de relevés de compte (Dinars et Euros)

Bonjour Amina,

Pourrais-tu, s’il te plaît, m’envoyer mes relevés de compte en Dinars et en Euros des trois derniers mois ?
Merci de les transmettre au service Data HO, au 7ᵉ étage.

Je te remercie par avance pour ton aide.

Bien cordialement,
Nihad Senhadji
