import streamlit as st
import datetime

# Simulated RAG response function
def rag_chatbot(user_input):
    return f"a. R√©ponse tr√®s d√©taill√©e :\n\nLe terme ¬´ compte √† vue ¬ª d√©signe un type de compte bancaire... (exemple)\n\nb. Sources utilis√©es :\n- Remplois.pdf (Pages 23, 5)\n- ProduitsPackages.pdf (Page 51)"

# Input area
user_input = st.chat_input("Type your message here...")

if "chat" not in st.session_state:
    st.session_state.chat = []

if user_input:
    timestamp = datetime.datetime.now()
    st.session_state.chat.append({
        "role": "user",
        "content": user_input,
        "timestamp": timestamp
    })

    with st.spinner("Thinking..."):
        answer = rag_chatbot(user_input)

    # Display assistant's response
    st.markdown("### Assistant :")
    st.markdown(answer, unsafe_allow_html=True)

    # Add hidden textarea for copying and the copy button
    copy_html = f"""
    <textarea id="copyTarget" style="position:absolute; left:-9999px; top:0;">{answer}</textarea>
    <button onclick="navigator.clipboard.writeText(document.getElementById('copyTarget').value)">Copier la r√©ponse</button>
    """
    st.markdown(copy_html, unsafe_allow_html=True)

    # Store assistant message in chat state
    st.session_state.chat.append({
        "role": "assistant",
        "content": answer,
        "timestamp": datetime.datetime.now()
    })

# Show full chat history
for message in st.session_state.chat:
    role = "Vous" if message["role"] == "user" else "Assistant"
    st.markdown(f"**{role} ({message['timestamp'].strftime('%Y-%m-%d %H:%M:%S')})**")
    st.markdown(message["content"])




^([A-Za-z\s]+)\s+([A-Za-z0-9]+)$





https://www.kaggle.com/competitions/ADC-4-0-BNP-Paribas-El-Djazair


import streamlit as st
import datetime
import html

# Initialize session state
if "chat_sessions" not in st.session_state:
    st.session_state.chat_sessions = {}
if "current_chat" not in st.session_state:
    st.session_state.current_chat = "default"
if st.session_state.current_chat not in st.session_state.chat_sessions:
    st.session_state.chat_sessions[st.session_state.current_chat] = []

# Title
st.title("Chatbot BNP ED")
st.subheader("Assistant")

# User input
user_input = st.chat_input("Type your message here")

if user_input and st.session_state.current_chat:
    timestamp = datetime.datetime.now()

    # Add user message to session
    st.session_state.chat_sessions[st.session_state.current_chat].append({
        "role": "user",
        "content": user_input,
        "timestamp": timestamp
    })

    # Process response
    with st.spinner("Thinking..."):
        response = rag_chatbot(user_input)  # Your RAG function here
        answer = response["answer"]
        sources = response.get("sources", [])
        evaluation = response.get("evaluation", "")
        response_timestamp = datetime.datetime.now()

    # Escape answer for HTML rendering
    escaped_answer = html.escape(answer)

    # Display the assistant answer
    st.markdown("**R√©ponse d√©taill√©e :**")
    st.markdown(answer, unsafe_allow_html=True)

    # Copy button using HTML + JS
    copy_html = f"""
    <textarea id="copyTarget" style="position: absolute; left: -1000px;">{escaped_answer}</textarea>
    <button onclick="navigator.clipboard.writeText(document.getElementById('copyTarget').value)">Copier la r√©ponse</button>
    """
    st.markdown(copy_html, unsafe_allow_html=True)

    # Show response timestamp
    st.markdown(f"R√©ponse g√©n√©r√©e √† : {response_timestamp.strftime('%Y-%m-%d %H:%M:%S')}")

    # Add assistant message to session
    st.session_state.chat_sessions[st.session_state.current_chat].append({
        "role": "assistant",
        "content": answer,
        "sources": sources,
        "evaluation": evaluation,
        "timestamp": response_timestamp
    })

    # Refresh interface
    st.rerun()






import streamlit as st
from datetime import datetime
import html

user_input = st.chat_input("Type your message here...")

if user_input and st.session_state.current_chat:
    timestamp = datetime.now()

    # Add user message
    st.session_state.chat_sessions[st.session_state.current_chat].append({
        "role": "user",
        "content": user_input,
        "timestamp": timestamp
    })

    # Get assistant response
    with st.spinner("Thinking..."):
        response = rag_chatbot(user_input)

    answer = response["answer"]
    escaped_answer = html.escape(answer)

    # Display the assistant message nicely
    st.markdown("**Assistant:**")
    st.markdown(answer)

    # Copy to clipboard button
    copy_html = f"""
    <textarea id="copyTarget" style="position: absolute; left: -1000px;">{escaped_answer}</textarea>
    <button onclick="navigator.clipboard.writeText(document.getElementById('copyTarget').value)">üìã Copier la r√©ponse</button>
    """
    st.markdown(copy_html, unsafe_allow_html=True)

    # Display timestamp
    st.markdown(f"*R√©ponse g√©n√©r√©e √† : {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")

    # Save assistant response
    st.session_state.chat_sessions[st.session_state.current_chat].append({
        "role": "assistant",
        "content": answer,
        "sources": response["sources"],
        "evaluation": response["evaluation"],
        "timestamp": datetime.now()
    })

    st.rerun()






import streamlit as st
from datetime import datetime

user_input = st.chat_input("Type your message here...")

if user_input and st.session_state.current_chat:
    timestamp = datetime.now()

    # Add user message
    st.session_state.chat_sessions[st.session_state.current_chat].append({
        "role": "user",
        "content": user_input,
        "timestamp": timestamp
    })

    # Get assistant response
    with st.spinner("Thinking..."):
        response = rag_chatbot(user_input)

    answer = response["answer"]

    # Display the assistant response
    st.markdown(f"**Assistant:** {answer}")

    # Copy button using HTML + JS
    copy_code = f"""
    <textarea id="toCopy" style="position:absolute; left:-1000px;">{answer}</textarea>
    <button onclick="navigator.clipboard.writeText(document.getElementById('toCopy').value)">üìã Copy Response</button>
    """
    st.markdown(copy_code, unsafe_allow_html=True)

    # Show timestamp
    st.markdown(f"**R√©ponse g√©n√©r√©e √† :** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    # Save assistant response
    st.session_state.chat_sessions[st.session_state.current_chat].append({
        "role": "assistant",
        "content": answer,
        "sources": response["sources"],
        "evaluation": response["evaluation"],
        "timestamp": datetime.now()
    })

    st.rerun()
